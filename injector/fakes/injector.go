// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type Injector struct {
	AddReleaseToTileStub        func(releasePath, releaseName, releaseVersion, tileDir string) error
	addReleaseToTileMutex       sync.RWMutex
	addReleaseToTileArgsForCall []struct {
		releasePath    string
		releaseName    string
		releaseVersion string
		tileDir        string
	}
	addReleaseToTileReturns struct {
		result1 error
	}
	addReleaseToTileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Injector) AddReleaseToTile(releasePath string, releaseName string, releaseVersion string, tileDir string) error {
	fake.addReleaseToTileMutex.Lock()
	ret, specificReturn := fake.addReleaseToTileReturnsOnCall[len(fake.addReleaseToTileArgsForCall)]
	fake.addReleaseToTileArgsForCall = append(fake.addReleaseToTileArgsForCall, struct {
		releasePath    string
		releaseName    string
		releaseVersion string
		tileDir        string
	}{releasePath, releaseName, releaseVersion, tileDir})
	fake.recordInvocation("AddReleaseToTile", []interface{}{releasePath, releaseName, releaseVersion, tileDir})
	fake.addReleaseToTileMutex.Unlock()
	if fake.AddReleaseToTileStub != nil {
		return fake.AddReleaseToTileStub(releasePath, releaseName, releaseVersion, tileDir)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addReleaseToTileReturns.result1
}

func (fake *Injector) AddReleaseToTileCallCount() int {
	fake.addReleaseToTileMutex.RLock()
	defer fake.addReleaseToTileMutex.RUnlock()
	return len(fake.addReleaseToTileArgsForCall)
}

func (fake *Injector) AddReleaseToTileArgsForCall(i int) (string, string, string, string) {
	fake.addReleaseToTileMutex.RLock()
	defer fake.addReleaseToTileMutex.RUnlock()
	return fake.addReleaseToTileArgsForCall[i].releasePath, fake.addReleaseToTileArgsForCall[i].releaseName, fake.addReleaseToTileArgsForCall[i].releaseVersion, fake.addReleaseToTileArgsForCall[i].tileDir
}

func (fake *Injector) AddReleaseToTileReturns(result1 error) {
	fake.AddReleaseToTileStub = nil
	fake.addReleaseToTileReturns = struct {
		result1 error
	}{result1}
}

func (fake *Injector) AddReleaseToTileReturnsOnCall(i int, result1 error) {
	fake.AddReleaseToTileStub = nil
	if fake.addReleaseToTileReturnsOnCall == nil {
		fake.addReleaseToTileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReleaseToTileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Injector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addReleaseToTileMutex.RLock()
	defer fake.addReleaseToTileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Injector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
